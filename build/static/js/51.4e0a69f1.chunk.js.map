{"version":3,"sources":["views/drivers/Driver.js"],"names":["connect","state","users","loader","userDetails","details","isLoading","loading","dispatch","actions","bindActionCreators","_getUserDetails","data","getUserDetails","_deleteDriver","deleteDriver","props","history","useHistory","console","log","useEffect","_getUserData","match","params","id","response","onDeleteDriver","user","user_id","_id","notification","message","push","placement","userData","lg","md","xs","style","width","height","margin","display","color","variant","row","src","_","isEmpty","image","isNil","onClick","item","Modal","confirm","title","okText","okType","cancelText","onOk","onCancel","error","showDeleteDriverDialog","ghost","type","className","htmlFor","fullName","email","formattedMobile","signUpVerificationStatus","content","selected_peer_group","name","schoolUniversity","learnrequests_updated","length","moment","created","format","items","userStrengths","fields","key","_classes","hover","striped","itemsPerPage","scopedSlots","textTransform","peerGroups","clickableRows","onRowClick","label","requestedUserId","requestedStrengthId"],"mappings":"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","file":"static/js/51.4e0a69f1.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from 'redux';\nimport { useHistory } from 'react-router-dom';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { getUserDetails, deleteDriver } from '../../actions/drivers';\nimport { Button, notification, Modal } from 'antd';\nimport {\n  CCard, CCardBody, CCardHeader, CCol, CRow, CLabel,\n  CSelect,\n  CFormGroup,\n  CInput,\n  CSpinner,\n  CImg,\n  CButton,\n  CDataTable,\n  CTooltip\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\nimport style from './style.css'\n\nconst User = (props) => {\n  const history = useHistory();\n\n  console.log('userDetails', props.userDetails);\n\n  useEffect(() => {\n    _getUserData(props.match.params.id);\n  }, []);\n\n  const _getUserData = async (id) => {\n    try {\n\n      const response = await props.actions._getUserDetails(id);\n      console.log('========> get user repsonse', response);\n    } catch (error) {\n      console.log(\"Error in get list\", error);\n    }\n\n  }\n\n  const onDeleteDriver = async (user) => {\n    try {\n\n      const data = {\n        user_id: user._id\n      };\n      const deleteDriverResponse  = await props.actions._deleteDriver(data);\n      notification['success']({\n        message: 'User deleted successfully',\n      });\n      history.push(`/drivers`);\n    } catch (error) {\n      console.log(error);\n      notification['error']({\n         message: (error.response && error.response.data) ?  error.response.data.message : 'something went wrong',\n         placement:'bottomRight',\n      });\n    }\n\n  }\n\n  const showDeleteDriverDialog = (item) => {\n    try {\n        Modal.confirm({\n          title: 'Are you sure delete this user?',\n          okText: 'Yes',\n          okType: 'danger',\n          cancelText: 'No',\n          onOk: () => onDeleteDriver(item),\n          onCancel() {\n            console.log('Cancel');\n          },\n        });\n\n    } catch (error) {\n\n    }\n  }\n\n  console.log(\"===========>PROPS FROM TABLE\", props);\n\n  const userData = props.userDetails.data;\n\n  return (\n    <CRow>\n      <CCol lg={12} md={12} xs={12}>\n        <CCard>\n          <CCardHeader>\n            Driver Details\n          </CCardHeader>\n          <CCardBody>\n            {props.isLoading ?\n              <CSpinner\n                style={{ width: '40px', height: '40px', margin: '0 auto', display: 'flex' }}\n                color=\"info\"\n                variant=\"grow\"\n              />\n              :\n\n              <div>\n                <CFormGroup row>\n                  <CCol xs=\"12\" md=\"10\">\n                    <CImg\n                      src={(userData && !_.isEmpty(userData.image) && !_.isNil(userData.image)) ? `https://peers-image.s3.amazonaws.com/${userData.image}` : \"https://raw.githubusercontent.com/Ashwinvalento/cartoon-avatar/master/lib/images/male/45.png\"}\n                      style={{ width: 115, height: 115 }}\n                    />\n                  </CCol>\n                  <CCol xs=\"12\" md=\"2\">\n                    <Button  onClick={() => showDeleteDriverDialog(userData)} ghost type=\"danger\">\n                      Delete\n                    </Button>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol xs=\"12\" md=\"3\">\n                    <CLabel className='labelStyle' htmlFor=\"select\">Name:</CLabel>\n                    <span className='span'>{userData && userData.fullName}</span>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"3\">\n                    <CLabel className='labelStyle' htmlFor=\"select\">Email:</CLabel>\n                    <span className='span'>{userData && userData.email}</span>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"3\">\n                    <CLabel className='labelStyle' htmlFor=\"select\">Phone:</CLabel>\n                    <span className='span'>{userData && userData.formattedMobile}</span>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"3\">\n                    <CLabel className='labelStyle' htmlFor=\"select\">Verification Status:</CLabel>\n                    <span className='span'>{userData && userData.signUpVerificationStatus}</span>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol xs=\"12\" md=\"3\">\n                    <CLabel className='labelStyle' htmlFor=\"select\">Selected Peer Group:</CLabel>\n                    <CTooltip content=\"Peer Group Details\"><span className='span'>\n                      <CButton onClick={() => history.push(`/peerGroup/${userData.selected_peer_group._id}`)}>{userData && userData.selected_peer_group && userData.selected_peer_group.name}\n                      </CButton>\n                    </span>\n                    </CTooltip>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"3\">\n                    <CLabel className='labelStyle' htmlFor=\"select\">School/University:</CLabel>\n                    <span className='span'>{userData && userData.schoolUniversity && userData.schoolUniversity.name}</span>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"3\">\n                    <CLabel className='labelStyle' htmlFor=\"select\">Connected User:</CLabel>\n                    <span className='span'>{userData && userData.learnrequests_updated && userData.learnrequests_updated.length}</span>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"3\">\n                    <CLabel className='labelStyle' htmlFor=\"select\">Created:</CLabel>\n                    <span className='span'>{userData && moment(userData.created).format('Do MMM YYYY')}</span>\n                  </CCol>\n                </CFormGroup>\n              </div>\n            }\n            <CRow>\n            <CCol lg={3} md={3}>\n                <CCard>\n                  <CCardHeader>\n                    User Strengths\n              </CCardHeader>\n                  <CCardBody>\n                    <CDataTable\n                      items={userData && userData.userStrengths ? userData.userStrengths : []}\n                      fields={[\n                        { key: 'name', _classes: 'font-weight-bold' },\n                      ]}\n                      hover\n                      striped\n                      itemsPerPage={10}\n                      // activePage={page}\n                      scopedSlots={{\n                        'name':\n                        (item) => (\n                          <td style={{ textTransform: 'capitalize' }}>\n                              {item.name}\n                          </td>\n                        )\n                      }}\n                    />\n                  </CCardBody>\n                </CCard>\n                </CCol>\n                <CCol lg={3} md={3}>\n                <CCard>\n                  <CCardHeader>\n                    Peer Groups\n              </CCardHeader>\n                  <CCardBody>\n                    <CDataTable\n                      items={userData && userData.peerGroups ? userData.peerGroups : []}\n                      fields={[\n                        { key: 'name', _classes: 'font-weight-bold' },\n                      ]}\n                      hover\n                      striped\n                      itemsPerPage={10}\n                      // activePage={page}\n                      clickableRows\n                      onRowClick={(item) => history.push(`/peerGroup/${item._id}`)}\n                      scopedSlots={{\n                        'name':\n                        (item) => (\n                          <td style={{ textTransform: 'capitalize' }}>\n                              {item.label}\n                          </td>\n                        )\n                      }}\n                    />\n                  </CCardBody>\n                </CCard>\n                </CCol>\n              <CCol lg={6} md={6}>\n            <CCard>\n              <CCardHeader>\n                Connected Users\n          </CCardHeader>\n              <CCardBody>\n\n                <CDataTable\n                  items={userData && userData.learnrequests_updated ? userData.learnrequests_updated : []}\n                      // clickableRows\n                      // onRowClick={(item) => _getUserData(item._id)}\n                  fields={[\n                    { key: 'fullName', _classes: 'font-weight-bold' },\n                    { key: 'formattedMobile', label: 'Mobile' },\n                    { key: 'strength', label: 'Strength' },\n                    'created'\n                  ]}\n                  hover\n                  striped\n                  itemsPerPage={10}\n                  // activePage={page}\n                  scopedSlots={{\n                    'fullName':\n                    (item) => (\n                      <td>\n                          {item.requestedUserId.fullName}\n                      </td>\n                    ),\n                    'formattedMobile':\n                    (item) => (\n                      <td>\n                          {item.requestedUserId.formattedMobile}\n                      </td>\n                    ),\n                    'strength':\n                    (item) => (\n                      <td style={{ textTransform: 'capitalize' }}>\n                          {item.requestedStrengthId[0].name}\n                      </td>\n                    ),\n                    'created':\n                    (item) => (\n                      <td>\n                          {moment(item.created).format('Do MMM YYYY hh:mm a')}\n                      </td>\n                    )\n                  }}\n                />\n              </CCardBody>\n            </CCard>\n            </CCol>\n            </CRow>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators({\n      _getUserDetails: (data) => getUserDetails(data),\n      _deleteDriver: (data) => deleteDriver(data),\n    }, dispatch)\n  }\n}\n\nfunction mapStateToProps(state) {\n  // console.log(\"==========> User\",state);\n  const { users, loader } = state;\n  return {\n    userDetails: users.details,\n    isLoading: loader.loading\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(User);"],"sourceRoot":""}